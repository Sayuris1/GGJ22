-- Input constants
local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

-- Message constants
local CONTACT = hash("trigger_response")

-- Movement functions
local function clamp_to_max(velocity, max, abs)
    if abs > max then velocity = (velocity / abs) * max end
    return velocity
end

local function is_raycast_sides(self, dest)
    local option = { all = true }
    -- Right
    -- Bottom
    local from = vmath.vector3(self.position);
    from.y = from.y - 24
    local to = vmath.vector3(from);
    to.x = dest + 16
    local is_rb = physics.raycast(from, to, self.groups, option)
    -- Up
    from = vmath.vector3(self.position);
    from.y = from.y + 24
    to = vmath.vector3(from);
    to.x = dest + 16
    local is_ru = physics.raycast(from, to, self.groups, option)
    -- Middle
    from = vmath.vector3(self.position);
    to = vmath.vector3(from);
    to.x = dest + 16
    local is_rm= physics.raycast(from, to, self.groups, option)

    -- Left
    -- Bottom
    local from = vmath.vector3(self.position);
    from.y = from.y - 24
    local to = vmath.vector3(from);
    to.x = dest - 16
    local is_lb = physics.raycast(from, to, self.groups, option)
    -- Up
    from = vmath.vector3(self.position);
    from.y = from.y + 24
    to = vmath.vector3(from);
    to.x = dest - 16
    local is_lu = physics.raycast(from, to, self.groups, option)
    -- Middle
    from = vmath.vector3(self.position);
    to = vmath.vector3(from);
    to.x = dest - 16
    local is_lm = physics.raycast(from, to, self.groups, option)

    if is_lb or is_lu or is_lm then
        return -1
    elseif is_rb or is_ru or is_rm then
        return 1
    else
        return 0
    end
end

local function is_raycast_down(self, dest)
    local option = { all = true }
    -- Right to down
    local from = vmath.vector3(self.position);
    from.x = from.x + 16
    local to = vmath.vector3(from);
    to.y = dest - 24
    local is_right = physics.raycast(from, to, self.groups, option)
    -- Left to down
    from = vmath.vector3(self.position);
    from.x = from.x - 16
    to = vmath.vector3(from);
    to.y = dest - 24
    local is_left = physics.raycast(from, to, self.groups, option)

    if is_right or is_left then return true end
    return false
end

local function is_raycast_up(self, dest)
    local option = { all = true }
    -- Right to down
    local from = vmath.vector3(self.position);
    from.x = from.x + 16
    local to = vmath.vector3(from);
    to.y = dest + 24
    local is_right = physics.raycast(from, to, self.groups, option)
    -- Left to down
    from = vmath.vector3(self.position);
    from.x = from.x - 16
    to = vmath.vector3(from);
    to.y = dest + 24
    local is_left = physics.raycast(from, to, self.groups, option)

    if is_right or is_left then return true end
    return false
end

local active = hash("white")

function init(self)
    msg.post(".", "acquire_input_focus")
    --msg.post("@render:", "clear_color", { color = vmath.vector4(1, 0, 0, 0) })
    -- Movement variables
    self.start_pos = go.get_position()
    self.position = self.start_pos

    self.velocity_x = 0
    self.steering = 0

    self.velocity_y = 0
    self.jump_time = 0
    self.is_jump = false
    self.can_jump = true
    self.is_down = true

    self.hang_time = 0
    self.wall = 0
    self.is_slide = true

    self.wall_jump_time = 0
    self.is_wall_jump = false
    self.wall_jump = 0

    self.is_jump_anim = true

    self.win = true

    go.property("max_x", 400)
    go.property("velocity_scale", 500)
    go.property("friction", 5)

    go.property("gravity", 3000)
    go.property("max_y", 400)
    go.property("max_jump", 0.4)
    go.property("jump_speed", 2000)

    go.property("max_hang", 1)
    go.property("wall_slide", 0.2)

    go.property("max_wall_jump", 0.4)
    go.property("wall_jump_speed", 4000)
    go.property("wall_jump_side", 20)

    go.property("type", hash("white"))

    if self.type == hash("white") then
        go.set_scale(vmath.vector3(0.1, 0.1, 1), "/black")
        msg.post("/map#black_collision", "disable")
        msg.post("/black", "disable")
    end

    -- Collision variables
    self.groups = { self.type }
end

function update(self, dt)
    if active == self.type then
        ---------- Movement update ----------
        ----- X direction -----
        if self.velocity_y < -55 then
            sprite.play_flipbook(".", "down")
        elseif self.velocity_y > 55 then
            sprite.play_flipbook(".", "up")
        elseif self.velocity_x < -55 then
            sprite.play_flipbook(".", "left")
        elseif self.velocity_x > 55 then
            sprite.play_flipbook(".", "right")
        else
            sprite.play_flipbook(".", "idle")
        end

        self.position = go.get_position()

        -- Apply friction if no button pressed
        local friction = self.friction * self.velocity_scale * dt
        if self.is_wall_jump then
            self.velocity_x =
                self.velocity_x - self.wall * self.wall_jump_side *
                    self.velocity_scale * dt
        elseif self.steering <= 0 and self.velocity_x > 0 and self.wall_jump ==
            0 then
            self.velocity_x = self.velocity_x - friction
            if self.steering < 0 then
                self.velocity_x = self.velocity_x + self.steering *
                                      self.velocity_scale * dt
                if self.is_down then particlefx.play("#change_r") end
            end
        elseif self.steering >= 0 and self.velocity_x < 0 and self.wall_jump ==
            0 then
            self.velocity_x = self.velocity_x + friction
            if self.steering > 0 then
                self.velocity_x = self.velocity_x + self.steering *
                                      self.velocity_scale * dt
                if self.is_down then particlefx.play("#change_l") end
            end
        else
            if self.wall_jump == 0 then
                self.velocity_x = self.velocity_x + self.steering *
                                      self.velocity_scale * dt
            else
                self.velocity_x = self.velocity_x + self.steering * 3 *
                                      self.velocity_scale * dt
            end
        end

        -- Max
        local velo_abs = math.abs(self.velocity_x)
        self.velocity_x = clamp_to_max(self.velocity_x, self.max_x, velo_abs)

        -- Prevent viggle and check collision
        local dest = self.position.x + self.velocity_x * dt
        if velo_abs > friction then
            local new_wall = is_raycast_sides(self, dest)
            if new_wall ~= 0 and new_wall ~= self.wall then
                self.is_wall_jump = false
                dest = 0
                self.hang_time = self.max_hang
            end

            self.wall = new_wall

            if self.wall ~= 0 then
                self.velocity_x = self.velocity_x / 2

            else
                self.position.x = dest
            end
        end

        ----- Y direction -----
        if self.is_jump then
            if self.jump_time < self.max_jump then
                self.jump_time = self.jump_time + dt
                self.velocity_y = self.velocity_y + self.jump_speed * dt
            else
                self.is_jump = false
            end
        elseif self.is_wall_jump then
            if self.wall_jump_time < self.max_wall_jump then
                self.wall_jump_time = self.wall_jump_time + dt
                self.velocity_y = self.velocity_y + self.wall_jump_speed * dt
            else
                self.is_wall_jump = false
            end
        else
            self.velocity_y = self.velocity_y - self.gravity * dt
        end

        -- Max
        velo_abs = math.abs(self.velocity_y)
        self.velocity_y = clamp_to_max(self.velocity_y, self.max_y, velo_abs)

        -- Check collision
        dest = self.position.y + self.velocity_y * dt
        self.is_down = is_raycast_down(self, dest)
        local is_up = is_raycast_up(self, dest)
        if self.is_down then
            self.velocity_y = self.velocity_y / 2
            self.can_jump = true
            self.jump_time = 0

            self.hang_time = self.max_hang
            self.is_slide = true

            self.wall_jump = 0
            self.wall_jump_time = 0

            -- On wall actions
        elseif self.wall ~= 0 then
            if self.hang_time > 0 then
                if self.velocity_y <= 0 then
                    self.velocity_y = 0
                    self.hang_time = self.hang_time - dt
                elseif self.is_slide then
                    self.is_slide = false
                    self.jump_time = self.jump_time - self.wall_slide
                end
            end

            if not is_up then self.position.y = dest end
        elseif not is_up then
            self.position.y = dest
        end

        go.set_position(self.position)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == CONTACT and message.enter then
        self.is_jump_anim = false
        go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD,
                   vmath.vector3(0, 0, 1), go.EASING_LINEAR, 0.1, 0, function()
            if message.other_group == hash("white_hit") or message.other_group ==
                hash("black_hit") then

                msg.post(".", "disable")
                self.is_jump_anim = true
                sound.play("/sound#hit")
                if self.type == hash("white") then
                    msg.post("/map#black_collision", "enable")
                    msg.post("/map#white_collision", "disable")
                    msg.post("/black", "enable")
                    active = hash("black")
                else
                    msg.post("/map#white_collision", "enable")
                    msg.post("/map#black_collision", "disable")
                    msg.post("/white", "enable")
                    active = hash("white")
                end
            elseif self.win then
                self.win = false
                sound.play("/sound#win", nil, function()
                    msg.post("main:/proxies#main", "next_lvl")
                    self.win = true
                end)
            end
        end)

    elseif message_id == hash("enable") then
        go.set_position(self.start_pos)
        go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD,
                   vmath.vector3(1, 1, 1), go.EASING_LINEAR, 0.1)
    end
end

function on_input(self, action_id, action)
    -- Get steering
    if action_id == LEFT then
        if action.pressed then
            if self.wall == 0 then
                self.steering = self.steering - 1
                self.left_pressed = true
            else
                timer.delay(0.2, false, function()
                    if self.left_pressed then
                        self.steering = self.steering - 1
                    end
                end)
                self.left_pressed = true
            end
        elseif action.released then
            self.left_pressed = false
            self.steering = self.steering + 1
            if self.steering ~= 0 and not self.right_pressed then
                self.steering = 0
            end
        end
    elseif action_id == RIGHT then
        if action.pressed then
            if self.wall == 0 then
                self.steering = self.steering + 1
                self.right_pressed = true
            else
                timer.delay(0.2, false, function()
                    if self.right_pressed then
                        self.steering = self.steering + 1
                    end
                end)
                self.right_pressed = true
            end
        elseif action.released then
            self.right_pressed = false
            self.steering = self.steering - 1
            if self.steering ~= 0 and not self.left_pressed then
                self.steering = 0
            end
        end
    elseif action_id == UP then
        if action.pressed then
            if self.can_jump and self.is_down then
                self.velocity_y = 0
                self.is_jump = true
                self.can_jump = false
                sound.play("/sound#jump")
                if self.is_jump_anim then
                    self.is_jump_anim = false
                    go.animate(".", "scale", go.PLAYBACK_ONCE_PINGPONG,
                               vmath.vector3(0.5, 1.1, 1), go.EASING_LINEAR,
                               0.2, 0, function()
                        self.is_jump_anim = true
                    end)
                end
            elseif self.wall ~= 0 then
                self.velocity_y = 0
                self.is_wall_jump = true
                self.wall_jump = self.wall
                self.wall_jump_time = 0
                sound.play("/sound#jump")
                if self.is_jump_anim then
                    self.is_jump_anim = false
                    go.animate(".", "scale", go.PLAYBACK_ONCE_PINGPONG,
                               vmath.vector3(0.5, 1.1, 1), go.EASING_LINEAR,
                               0.2, 0, function()
                        self.is_jump_anim = true
                    end)
                end
            end
        elseif action.released then
            if self.wall == 0 then
                if self.jump_time < self.max_jump and self.is_jump then
                    self.velocity_y = 0
                end

                if self.wall_jump_time < self.max_wall_jump and
                    self.is_wall_jump then self.velocity_y = 0 end
            end

            self.is_jump = false
            self.is_wall_jump = false
        end
    end
end
