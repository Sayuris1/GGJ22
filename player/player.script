-- Input Constants
local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")

function init(self)
    msg.post(".", "acquire_input_focus")
    -- Movement variables
    self.position = go.get_position()

    self.velocity = vmath.vector3(0)
    self.steering = vmath.vector3(0)

    go.property("max_speed", 500)
    go.property("velocity_scale", 300)
    go.property("friction", 2)
end

function update(self, dt)
    -- Movement update
    if self.steering.x == 0 then
        if self.velocity.x > 0 then
            self.velocity.x = self.velocity.x + -self.friction * self.velocity_scale * dt
        elseif self.velocity.x < 0 then
            self.velocity.x = self.velocity.x + self.friction * self.velocity_scale * dt
        end
    else
        self.velocity.x = self.velocity.x + self.steering.x * self.velocity_scale * dt
    end

    if vmath.length(self.velocity) > self.max_speed then
        self.velocity = vmath.normalize(self.velocity)
        self.velocity = self.velocity * self.max_speed
    end

    self.position = self.position + self.velocity * dt

    go.set_position(self.position)
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Learn more: https://defold.com/manuals/message-passing/
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
    -- Get steering
    if action_id == LEFT then
        if action.pressed then
            self.steering.x = self.steering.x - 1
        elseif action.released then
            self.steering.x = self.steering.x + 1
        end
    elseif action_id == RIGHT then
        if action.pressed then
            self.steering.x = self.steering.x + 1
        elseif action.released then
            self.steering.x = self.steering.x - 1
        end
    end
end
